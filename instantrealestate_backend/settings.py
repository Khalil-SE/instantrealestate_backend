"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from decouple import config
from datetime import timedelta

from corsheaders.defaults import default_headers



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY') #"django-insecure-#p_yis4(ut&+)=k0r$x3&%*(z=dqz73niwfwg)0vf1q1t4z@l#"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
# [
#     'localhost',
#     '127.0.0.1',
#     '378c-2001-b07-646e-dd9a-7073-4b70-291b-9921.ngrok-free.app',
# ]

# AT Deployment
CORS_ALLOW_ALL_ORIGINS = True  # Or set specific Netlify domain

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'users',
    'system',
    'subscriptions',
    'shared',
    'instabot',
    'property',
]

# Making the Authorization system use the custom user model
# https://docs.djangoproject.com/en/5.2/topics/auth/customizing/#specifying-a-custom-user-model
AUTH_USER_MODEL = 'users.CustomUser'

# "django.middleware.common.CommonMiddleware", i have removed it from below array. i think it was doubled
MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',

    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "instantrealestate_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "instantrealestate_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),  # e.g., 'mydatabase'
        'USER': config('DB_USER'),  # e.g., 'mydatabaseuser'
        'PASSWORD': config('DB_PASSWORD'),  # e.g., 'mypassword'
        'HOST': config('DB_HOST', default='localhost'),  # e.g., 'localhost'
        'PORT': config('DB_PORT', default='5432'),  # e.g., '5432'
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Required for production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Optional (but good)
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=2),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
}


# Bunny cdn API settings
BUNNY_STORAGE_ZONE = config("BUNNY_STORAGE_ZONE")
BUNNY_API_KEY = config("BUNNY_API_KEY")
BUNNY_STORAGE_HOSTNAME = config("BUNNY_STORAGE_HOSTNAME")
BUNNY_PUBLIC_URL = config("BUNNY_PUBLIC_URL")



# Allowing REACT dev server to connect from different port
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    
]

CORS_ALLOW_CREDENTIALS = True

# Optional (for legacy browser support)
CORS_ALLOW_HEADERS = list(default_headers) + [
    'Authorization',
]

# Optional if you're using CSRF cookie-based auth:
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://instantrealestatebackend-production.up.railway.app"
]


# Optional compression
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# # For development only
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Email Configuration
EMAIL_BACKEND = config('EMAIL_BACKEND')
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT', cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')
SUPPORT_EMAIL = config('SUPPORT_EMAIL',DEFAULT_FROM_EMAIL)


# Lofty API settings
LOFTY_CLIENT_ID = config('LOFTY_CLIENT_ID')
LOFTY_CLIENT_SECRET = config('LOFTY_CLIENT_SECRET')
LOFTY_REDIRECT_URI = config('LOFTY_REDIRECT_URI')
LOFTY_AUTH_URL = config('LOFTY_AUTH_URL')
LOFTY_TOKEN_URL = config('LOFTY_TOKEN_URL')
LOFTY_USER_INFO_URL = config('LOFTY_USER_INFO_URL')
LOFTY_LISTINGS_URL = config('LOFTY_LISTINGS_URL')


# Celery settings
CELERY_BROKER_URL = config('CELERY_BROKER_URL', 'redis://localhost:6379/0')   # assuming Redis
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Celery Beat config (for periodic tasks)
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    "sync-lofty-properties-every-10-min": {
        "task": "property.tasks.sync.sync_lofty_all_users",
        "schedule": crontab(minute="*/10"),
    },
}
